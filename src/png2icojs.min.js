const MaxSize=256,MaxFiles=65536,FileHeaderSize=6,ImageHeaderSize=16,IcoMime="image/x-icon";export class PngIcoConverter{async convertToBlobAsync(e,t=IcoMime){const n=await this.convertAsync(e);return new Blob([n],{type:t})}async convertAsync(e){const t=e.length;if(t>MaxFiles)throw new Error("TOO_MANY_FILES");const n=FileHeaderSize+16*ImageHeaderSize,r=n+this.sumInputLen(e),o=new Uint8Array(r);o.set([0,0,1,0,...this.to2Bytes(t)],0);let i=n;for(let t=0;t<e.length;t++){const n=FileHeaderSize+ImageHeaderSize*t,r=e[t],s=this.toBlob(r.png),a=await this.loadImageAsync(s),c=a.naturalWidth,l=a.naturalHeight;if(!r.ignoreSize&&(c>MaxSize||l>MaxSize))throw new Error("INVALID_SIZE");o.set([c>MaxSize?0:c,l>MaxSize?0:l,0,0,0,0,...r.bpp?this.to2Bytes(r.bpp):[0,0],...this.to4Bytes(s.size),...this.to4Bytes(i)],n);const g=r.png instanceof ArrayBuffer?r.png:await r.png.arrayBuffer();o.set(new Uint8Array(g),i),i+=s.size}return o}loadImageAsync(e){return new Promise((t,n)=>{const r=new Image;r.onload=(()=>t(r)),r.onerror=(()=>n("INVALID_IMAGE")),r.src=URL.createObjectURL(e)})}toBlob(e,t="image/png"){return e instanceof Blob?e:new Blob([e],{type:t})}to2Bytes(e){return[255&e,e>>8&255]}to4Bytes(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}sumInputLen(e){let t=0;for(const n of e){const e=n.png;e instanceof Blob?t+=e.size:t+=e.byteLength}return t}}